//
//  MapView.swift
//  TestApp
//
//  Created by Teddy Kalp on 2020-10-16.
//

import SwiftUI
import MapKit

struct MapView: UIViewRepresentable {
    @ObservedObject var landMarks = LandMarkRespository();
    @ObservedObject var trucks = TruckRespository();
    
    var annotations: [TruckAnnotation]
    @Binding var isActive: Bool
    @Binding var selectedTruck: TruckAnnotation?
    var currentLocation: CLLocationCoordinate2D
    
<<<<<<< HEAD
    func makeUIView(context: Context) -> MKMapView {
            let mapView = MKMapView()
            mapView.showsUserLocation = true
            mapView.delegate = context.coordinator
            return mapView
=======
    func makeUIView(context: Context) -> MKMapView{
        MKMapView(frame: .zero)
>>>>>>> remotes/origin/JordanNewBranch
    }
    
    func updateUIView(_ map: MKMapView, context: Context) {
<<<<<<< HEAD
        let calgary = CLLocationCoordinate2D(latitude: 51.0447, longitude: -114.0719)
        let span = MKCoordinateSpan(latitudeDelta: 0.3, longitudeDelta: 0.3)
        // use this to center the map on user's current location
        //let region = MKCoordinateRegion(center: currentLocation, span: span)
        let region = MKCoordinateRegion(center: calgary, span: span)
        map.setRegion(region, animated: true)
=======
>>>>>>> remotes/origin/JordanNewBranch
        
        let mainCoordinate = CLLocationCoordinate2D(latitude: 51.0447, longitude: -114.0719)
        let span = MKCoordinateSpan(latitudeDelta: 0.2, longitudeDelta: 0.2)
        let region = MKCoordinateRegion(center: mainCoordinate, span: span)
        
        // this is how to make an annotation to a MapKit UI
        //let annotation = MKPointAnnotation()
        //annotation.coordinate = CLLocationCoordinate2D(latitude: 50.726300, longitude: -113.988410)
        
        map.setRegion(region, animated: true)
        // this is how to add an annotation to a MapKitUI
        //map.addAnnotation(annotation)
        for lm in landMarks.landmarks{
            let annotation = MKPointAnnotation()
            annotation.coordinate = CLLocationCoordinate2D(latitude: lm.latitude, longitude: lm.longitude)
            map.addAnnotation(annotation)
        }
    }
<<<<<<< HEAD

    func makeCoordinator() -> Coordinator {
            Coordinator(self)
    }

    class Coordinator: NSObject, MKMapViewDelegate {
        var parent: MapView

        init(_ parent: MapView) {
            self.parent = parent
        }
        func mapView(_ mapView: MKMapView, viewFor annotation: MKAnnotation) -> MKAnnotationView? {
            // this is our unique identifier for view reuse
            let identifier = "Placemark"

            // attempt to find a cell we can recycle
            var annotationView = mapView.dequeueReusableAnnotationView(withIdentifier: identifier)

            if annotationView == nil {
                // we didn't find one; make a new one
                annotationView = MKPinAnnotationView(annotation: annotation, reuseIdentifier: identifier)

                // allow this to show pop up information
                annotationView?.canShowCallout = true

                // attach an information button to the view
                annotationView?.rightCalloutAccessoryView = UIButton(type: .detailDisclosure)
            } else {
                // we have a view to reuse, so give it the new annotation
                annotationView?.annotation = annotation
            }
            
            // change color of truckannotation depending of if its open or not
            if let truckAnnotation = annotation as? TruckAnnotation{
               let circle = truckAnnotation.truck.open ? UIImage(systemName:"mappin.circle.fill")!.withTintColor(primColorUI):
                    UIImage(systemName:"mappin.circle.fill")!.withTintColor(.red)
                let size = CGSize(width: 40, height: 40)
                annotationView?.image = UIGraphicsImageRenderer(size:size).image {
                    _ in circle.draw(in:CGRect(origin:.zero, size:size))
                }
            }
            // if its not a truck annotation, it is a pin for user
            else{
                let image =  UIImage(systemName:"largecircle.fill.circle")!.withTintColor(.systemBlue)
                 let size = CGSize(width: 20, height: 20)
                 annotationView?.image = UIGraphicsImageRenderer(size:size).image {
                     _ in image.draw(in:CGRect(origin:.zero, size:size))
                 }
                annotationView?.canShowCallout = false
            }
            
            return annotationView
=======
/*
struct MapView_Previews: PreviewProvider {
    static var previews: some View {
        MapView()
>>>>>>> remotes/origin/JordanNewBranch
        }
        
        func mapView(_ mapView: MKMapView, annotationView view: MKAnnotationView, calloutAccessoryControlTapped control: UIControl)
        {
            self.parent.isActive = true
            self.parent.selectedTruck = (view.annotation as? TruckAnnotation)!
        }
    }
}
*/
}
